version: "3.8"

x-aosoluti-microservices-database-common:
  &aosoluti-microservices-database-common
  image: docker.io/bitnami/postgresql:16
  networks:
    - aosoluti-microservices-network
  deploy:
    resources:
      limits:
        memory: 64M

services:
  grafana-minio:
    image: minio/minio
    container_name: grafana-minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./volumes/grafana/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - aosoluti-microservices-network
    deploy:
      resources:
        limits:
          memory: 192M

  grafana-loki-read:
    image: grafana/loki:2.9.5
    container_name: grafana-loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./volumes/grafana/configs/loki-local-config.yml:/etc/loki/config.yaml
    depends_on:
      - grafana-minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      aosoluti-microservices-network:
        aliases:
          - loki
    deploy:
      resources:
        limits:
          memory: 64M

  grafana-loki-write:
    image: grafana/loki:2.9.5
    container_name: grafana-loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./volumes/grafana/configs/loki-local-config.yml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - grafana-minio
    networks:
      <<: *loki-dns
    deploy:
      resources:
        limits:
          memory: 64M

  grafana-promtail:
    image: grafana/promtail:2.9.5
    container_name: grafana-promtail
    volumes:
      - ./volumes/grafana/configs/promtail-docker-config.yml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - aosoluti-microservices-network
    depends_on:
      - grafana-gateway
    deploy:
      resources:
        limits:
          memory: 64M

  grafana-prometheus:
    image: prom/prometheus:v2.50.1
    container_name: grafana-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./volumes/grafana/configs/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - aosoluti-microservices-network
    deploy:
      resources:
        limits:
          memory: 64M

  grafana-tempo:
    image: grafana/tempo
    container_name: grafana-tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ./volumes/grafana/configs/tempo-config.yml:/etc/tempo-config.yml
    networks:
      - aosoluti-microservices-network
    deploy:
      resources:
        limits:
          memory: 64M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./volumes/grafana/configs/grafana-datasource-config.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - grafana-gateway
    networks:
      - aosoluti-microservices-network
    deploy:
      resources:
        limits:
          memory: 128M

  grafana-gateway:
    image: nginx:latest
    container_name: grafana-gateway
    depends_on:
      - grafana-loki-read
      - grafana-loki-write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://grafana-loki-write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://grafana-loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://grafana-loki-read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://grafana-loki-write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://grafana-loki-read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://grafana-loki-read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aosoluti-microservices-network
    deploy:
      resources:
        limits:
          memory: 32M

  aosoluti-microservices-accounts-api-primary-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-accounts-api-primary-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_DATABASE=aosoluti-microservices-accounts-api-db
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5432:5432
    volumes:
      - "./volumes/aosoluti-microservices-accounts-api-db/primary:/bitnami/postgresql"
  aosoluti-microservices-accounts-api-replica-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-accounts-api-replica-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_MASTER_HOST=aosoluti-microservices-accounts-api-primary-db
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5433:5432
    volumes:
      - "./volumes/aosoluti-microservices-accounts-api-db/replica:/bitnami/postgresql"
    depends_on:
      - aosoluti-microservices-accounts-api-primary-db
  aosoluti-microservices-cards-api-primary-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-cards-api-primary-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_DATABASE=aosoluti-microservices-cards-api-db
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5434:5432
    volumes:
      - "./volumes/aosoluti-microservices-cards-api-db/primary:/bitnami/postgresql"
  aosoluti-microservices-cards-api-replica-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-cards-api-replica-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_MASTER_HOST=aosoluti-microservices-cards-api-primary-db
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5435:5432
    volumes:
      - "./volumes/aosoluti-microservices-cards-api-db/replica:/bitnami/postgresql"
    depends_on:
      - aosoluti-microservices-cards-api-primary-db
  aosoluti-microservices-employees-api-primary-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-employees-api-primary-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_DATABASE=aosoluti-microservices-employees-api-db
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5436:5432
    volumes:
      - "./volumes/aosoluti-microservices-employees-api-db/primary:/bitnami/postgresql"
  aosoluti-microservices-employees-api-replica-db:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-employees-api-replica-db
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=dev_replica
      - POSTGRESQL_REPLICATION_PASSWORD=dev
      - POSTGRESQL_MASTER_HOST=aosoluti-microservices-employees-api-primary-db
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 5437:5432
    volumes:
      - "./volumes/aosoluti-microservices-employees-api-db/replica:/bitnami/postgresql"
    depends_on:
      - aosoluti-microservices-employees-api-primary-db
  aosoluti-microservices-cache:
    image: docker.io/bitnami/redis:7.2
    container_name: aosoluti-microservices-cache
    environment:
      - REDIS_PASSWORD=dev
      - REDIS_MASTER_PASSWORD=dev
    ports:
      - 6379:6379
    networks:
      - aosoluti-microservices-network
    volumes:
      - "./volumes/aosoluti-microservices-cache:/bitnami/redis"
    deploy:
      resources:
        limits:
          memory: 64M
  aosoluti-microservices-keycloak-database:
    <<: *aosoluti-microservices-database-common
    container_name: aosoluti-microservices-keycloak-database
    ports:
      - 5430:5432
    environment:
      - POSTGRESQL_USERNAME=dev
      - POSTGRESQL_PASSWORD=dev
      - POSTGRESQL_DATABASE=keycloak-db
    volumes:
      - './volumes/aosoluti-microservices-keycloak-database:/bitnami/postgresql'
  aosoluti-microservices-keycloak:
    image: docker.io/bitnami/keycloak:24
    container_name: aosoluti-microservices-keycloak
    environment:
      - KEYCLOAK_DATABASE_PORT=5432
      - KEYCLOAK_DATABASE_HOST=aosoluti-microservices-keycloak-database
      - KEYCLOAK_DATABASE_USER=dev
      - KEYCLOAK_DATABASE_NAME=keycloak-db
      - KEYCLOAK_DATABASE_PASSWORD=dev
      - KEYCLOAK_DATABASE_VENDOR=postgresql
      - KEYCLOAK_ADMIN=dev-keycloak
      - KEYCLOAK_ADMIN_PASSWORD=dev-keycloak
      - KEYCLOAK_HTTP_PORT=8080
      - KEYCLOAK_EXTRA_ARGS="-Dkeycloak.profile.feature.scripts=enabled"
    depends_on:
      - aosoluti-microservices-keycloak-database
    ports:
      - 8079:8080
    networks:
      - aosoluti-microservices-network
    volumes:
      - './volumes/aosoluti-microservices-keycloak:/bitnami/keycloak'
    deploy:
      resources:
        limits:
          memory: 512M
#  kafka:
#    image: docker.io/bitnami/kafka:3.6
#    container_name: aosoluti-microservices-kafka
#    ports:
#      - "9092:9092"
#    networks:
#      - aosoluti-microservices-network
#    volumes:
#      - "./volumes/aosoluti-microservices-kafka:/bitnami"
#    environment:
#      - KAFKA_CFG_NODE_ID=0
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_HEAP_OPTS=-Xms192m -Xmx256m
#    deploy:
#      resources:
#        limits:
#          memory: 256M
#  kafdrop:
#    image: obsidiandynamics/kafdrop:4.0.1
#    container_name: aosoluti-microservices-kafka-ui
#    environment:
#      - KAFKA_BROKERCONNECT=kafka:9092
#      - JVM_OPTS=-Xms192m -Xmx256m
#    networks:
#      - aosoluti-microservices-network
#    ports:
#      - "19000:9000"
#    depends_on:
#      - kafka
#    deploy:
#      resources:
#        limits:
#          memory: 256M

networks:
  aosoluti-microservices-network:
    driver: bridge
